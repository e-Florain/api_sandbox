* Terminologie
** Bases de données
- Base Maison :: base de données contenant tous les adhérents créée et
     maintenue par nos soins. techno à définir : PostgreSQL ? MangoDB ?
- Base Cyclos :: base de données spécifique Cyclos,

** TODO Composants logiciels
- API HelloAsso
- API Cyclos
- Connecteur HelloAsso

#+begin_src dot :file change.png :cmd circo :cmdline -Tpng :exports none :results drawer
  digraph G { Connexion_Cyclos -> redirection_vers_HA -> paiement ->
  HA_POST_vers_Maison -> Maison_POST_vers_Cyclos }
#+end_src

#+RESULTS:
:RESULTS:
[[file:change.png]]
:END:

* Gestion des secrets :

On va pour l'instant utiliser un fichier de config qui ne sera pas
ajouté sur le dépôt pour des raisons évidentes. Voici un exemple du
fichier de config à renseigner.
#+begin_src python :tangle config.py.example :results none
  ha = {'url': "https://api.helloasso.com/v3/",
        'user': 'adminAPI',
        'password': 'xxxx'}
  db = {'name': 'coucou',
        'user': 'user',
        'password': 'xxxx'}
  cyclos = {'url': 'https://demo.cyclos.org/api',
            'user': 'user',
            'password': 'xxx',
            'systemIDNEF': 'xxxxx'}
#+end_src

Afin d'être certains de ne pas ajouter le vrai fichier par erreur sur
le dépôt, on l'ajoute à gitignore.

#+BEGIN_SRC bash :tangle .gitignore
config.py
#+END_SRC

Une fois le fichier complété :

#+begin_src ipython :session api :file  :exports both
import config as cfg
cfg.ha['url']
#+end_src

#+RESULTS:
: # Out[1]:
: : 'https://api.helloasso.com/v3/'
* API en Python (Requests)
Afin de faire des requêtes sur une API REST, il y a une super
bibliothèque : "requests".

** Documentation :
https://requests.readthedocs.io/en/master/

** Installation :
 De mon coté je n'ai rien eu à faire sous Pop_os 18.04.

** Bac à sable
#+begin_src ipython :session api :file  :exports code
import requests
#+end_src

#+RESULTS:
: # Out[4]:

Afin de me faire la main, je vais utiliser une API ouverte :
http://open-notify.org/ qui met à disposition une partie des données
de la NASA.

Cette API, comme toutes les APIs mettent à disposition des URLs
permettant d'accéder à des données spécifiques. J'ai trouvé une URL
permettant de récupérer la liste des astronautes actuellement dans
l'espace :
http://api.open-notify.org/astros.json

Ici, on effectue la requête et on récupère la réponse.
#+begin_src ipython :session api :file  :exports both :results output
r = requests.get("http://api.open-notify.org/astros.json")
print(type(r))
#+end_src

#+RESULTS:
: <class 'requests.models.Response'>

Très bien, mais qu'en fait-on ?

On peut déjà commencer par vérifier le code de statut.

#+begin_src ipython :session api :file  :exports both :results output
print(r.status_code)
#+end_src

#+RESULTS:
: 200

#+caption: codes de statuts
| Category           | Description                                                                                           |
|--------------------+-------------------------------------------------------------------------------------------------------|
| 1xx: Informational | Communicates transfer protocol-level information.                                                     |
| 2xx: Success       | 	Indicates that the client’s request was accepted successfully.                                |
| 3xx: Redirection   | 	Indicates that the client must take some additional action in order to complete their request. |
| 4xx: Client Error  | 	This category of error status codes points the finger at clients.                             |
| 5xx: Server Error  | The server takes responsibility for these error status codes.                                           |

Exploitation des données récupérées :

Le contenu de la réponse est une chaîne de caractères non encodée.  La
méthode '.json()' permet de récupérer un dictionnaire python, qui sera
par la suite facilement exploitable. Ici on ne fait que l'afficher.
#+begin_src ipython :session api :file  :exports both :results output
import pprint
pprint.pprint(r.json())
#+end_src

#+RESULTS:
: {'message': 'success',
:  'number': 3,
:  'people': [{'craft': 'ISS', 'name': 'Chris Cassidy'},
:             {'craft': 'ISS', 'name': 'Anatoly Ivanishin'},
:             {'craft': 'ISS', 'name': 'Ivan Vagner'}]}

Plus compliqué, une requête avec des paramètres. Toujours sur
open-notify, on trouve une adresse permettant de récupérer les
prochaines dates de passages de l'ISS au dessus d'un couple de
coordonnées (LAT, LON). Le code ci dessous permet d'obtenir
l'équivalent de cette requête :
http://api.open-notify.org/iss-pass.json?lat=40.71&lon=-74

Le passage de paramètres est ainsi simplifié en utilisant un
dictionnaire python.
#+begin_src ipython :session api :file  :exports both :results output
parameters = {"lat": 48.684426, "lon": 6.171111}
r = requests.get("http://api.open-notify.org/iss-pass.json", params=parameters)
pprint.pprint(r.json())
#+end_src

#+RESULTS:
#+begin_example
{'message': 'success',
 'request': {'altitude': 100,
             'datetime': 1587598611,
             'latitude': 48.684426,
             'longitude': 6.171111,
             'passes': 5},
 'response': [{'duration': 544, 'risetime': 1587617490},
              {'duration': 651, 'risetime': 1587623210},
              {'duration': 652, 'risetime': 1587629021},
              {'duration': 654, 'risetime': 1587634845},
              {'duration': 642, 'risetime': 1587640656}]}
#+end_example

Conversion des timestamps en dates humainement compréhensibles :
#+begin_src ipython :session api :file  :exports both
from datetime import datetime
data = r.json()
dates = [str(datetime.fromtimestamp(d['risetime'])) for d in data['response']]
dates
#+end_src

#+RESULTS:
: # Out[36]:
: #+BEGIN_EXAMPLE
:   ['2020-04-23 06:51:30',
:   '2020-04-23 08:26:50',
:   '2020-04-23 10:03:41',
:   '2020-04-23 11:40:45',
:   '2020-04-23 13:17:36']
: #+END_EXAMPLE

* Maria DB
Il existe un connecteur python, qui utilise le connecteur c.
https://mariadb.com/resources/blog/mariadb-connector-python-beta-now-available/

Prérequis :
- Install Python 3 (minimum supported version is 3.6)
- Access a MariaDB 10.x instance

#+BEGIN_SRC bash :export code
sudo apt install mariadb-server mariadb-client
#+END_SRC

- Install MariaDB Connector/C version 3.1.5 or newer :: shipped with mariadb-server >= 10.3

*** Connexion à la base :
#+begin_src ipython :session api :file  :exports code
  import mysql.connector as mariadb
  import config as cfg
  mariadb_connection = mariadb.connect(user=cfg.db['user'],
                                       password=cfg.db['password'],
                                       database=cfg.db['name'],
                                       buffered=True)
  cursor = mariadb_connection.cursor()
#+end_src

#+RESULTS:
: # Out[5]:


#+BEGIN_SRC
CREATE TABLE adherents
(adherent_id INT AUTO_INCREMENT PRIMARY KEY,
name_last VARCHAR(50),
name_first VARCHAR(50),
mail VARCHAR(50),
country VARCHAR(50) );
#+END_SRC

*** Écriture dans la base :
#+begin_src ipython :session api :file  :exports both
cursor.execute("INSERT INTO adherents (name_first, name_last) VALUES (%s,%s)", ('virgile', 'coucou'))
mariadb_connection.commit()
#+end_src

#+RESULTS:
: # Out[11]:

Ici le commit sert à valider les modifications.
#+RESULTS:
: # Out[145]:

*** Lecture dans la base :
#+begin_src ipython :session api :file  :exports both
cursor.execute("SELECT adherent_id, name_first, name_last FROM adherents")
print(cursor)
for id, first_name, last_name in cursor:
    print("First name: {}, Last name: {}, id: {}".format(first_name,last_name, id))
#+end_src

#+RESULTS:
: # Out[12]:

* Connecteur HelloAsso
** Interaction avec l'API
*** Récupération de l'ID

C'est un peu contre intuitif, mais le moyen de récupérer l'ID de
l'organisation est d'interroger la liste complète des organisations
accessibles à l'utilisateur spécifique.
#+begin_src ipython :session api :file  :exports both :results both
  import requests
  url = 'https://api.helloasso.com/v3/organizations.json'
  r= requests.get(url, auth=(cfg.ha['user'], cfg.ha['password']))
  if r.status_code == 200:
      resources = r.json()['resources']
      if len(resources) == 1:
          id = resources[0]['id']
  id
#+end_src

#+RESULTS:
: # Out[4]:
: : '000001201911'

*** Récupération des listes

Exemple liste des paiements effectués par "Virgile"
#+begin_src ipython :session api :file  :exports code
  import config as cfg
  url = 'https://api.helloasso.com/v3/payments.json'
  params = {'results_per_page': 1000}
  r = requests.get(url, auth=(cfg.ha['user'], cfg.ha['password']), params=params)
  if r.status_code == 200:
      resources = r.json()['resources']
      resources = [resource for resource in resources if resource['payer_first_name'] == 'Virgile']
resources
#+end_src

#+RESULTS:
#+begin_example
# Out[5]:
,#+BEGIN_EXAMPLE
  [{'id': '000067125943',
  'date': '2020-02-17T15:05:00',
  'amount': 20.0,
  'type': 'CREDIT',
  'mean': 'CARD',
  'payer_first_name': 'Virgile',
  'payer_last_name': 'Daugé',
  'payer_address': '',
  'payer_zip_code': '',
  'payer_city': '',
  'payer_country': 'FRA',
  'payer_email': 'virgile.dauge@pm.me',
  'payer_society': '',
  'payer_is_society': False,
  'url_receipt': 'https://www.helloasso.com/associations/le-florain/adhesions/le-florain-formulaire-d-adhesion-utilisateurs/paiement-attestation/13163682',
  'url_tax_receipt': '',
  'actions': [{'id': '000131636823',
  'type': 'SUBSCRIPTION',
  'amount': 10.0,
  'status': 'PROCESSED'},
  {'id': '000131636851',
  'type': 'DONATION',
  'amount': 10.0,
  'status': 'PROCESSED'}],
  'status': 'AUTHORIZED'}]
,#+END_EXAMPLE
#+end_example

Ce qui donne une liste ici ne contenant qu'un seule élément car je
l'ai filtrée, qui donne le résultat suivant une fois anonymisé. :
#+BEGIN_EXAMPLE
  [{'id': '0000xxxxxxxx',
  'date': '2020-xx-xx17T15:05:00',
  'amount': 20.0,
  'type': 'CREDIT',
  'mean': 'CARD',
  'payer_first_name': 'Virgile',
  'payer_last_name': 'Dupond',
  'payer_address': '',
  'payer_zip_code': '',
  'payer_city': '',
  'payer_country': 'FRA',
  'payer_email': 'bob.dupond@pm.me',
  'payer_society': '',
  'payer_is_society': False,
  'url_receipt': 'https://www.helloasso.com/associations/<nom-association>/adhesions/<nom-du-formulaire>/paiement-attestation/xxxxxxxx',
  'url_tax_receipt': '',
  'actions': [{'id': '000xxxxxxxxx',
  'type': 'SUBSCRIPTION',
  'amount': 10.0,
  'status': 'PROCESSED'},
  {'id': '000xxxxxxxxx',
  'type': 'DONATION',
  'amount': 10.0,
  'status': 'PROCESSED'}],
  'status': 'AUTHORIZED'}]
#+END_EXAMPLE

*** Récupération des détails
Ici, on va récupérer les détails de la première action du paiement.
#+begin_src ipython :session api :file  :exports code
action_id = resources[0]['actions'][0]['id']
url = 'https://api.helloasso.com/v3/actions/{}.json'.format(action_id)
r = requests.get(url, auth=(cfg.ha['user'], cfg.ha['password']))
#+end_src

Une fois anonymisé :
#+BEGIN_EXAMPLE
  {'id': '000xxxxxxxxx',
  'id_campaign': '000000xxxxxx',
  'id_organism': '00000xxxxxxx',
  'id_payment': '0000xxxxxxxx',
  'date': '2020-xx-xxT15:04:40.8033672',
  'amount': 10.0,
  'type': 'SUBSCRIPTION',
  'first_name': 'Virgile ',
  'last_name': 'xxxxx',
  'email': 'albert.bob@libre.fr',
  'custom_infos': [{'label': 'Email', 'value': 'albert.bob@libre.fr'},
  {'label': 'Adresse', 'value': '42 rue du moulin derrière la maison jaune'},
  {'label': 'Code Postal', 'value': '54000'},
  {'label': 'Ville', 'value': 'Nancy'},
  {'label': 'Numéro de téléphone', 'value': 'xxxxxxxxxx'},
  {'label': "Numéro de l'association soutenue (voir http://www.monnaielocalenancy.fr/doc/UnPourCentAsso.pdf)",
  'value': 'xx'},
  {'label': "Je souhaite m'impliquer bénévolement dans Le Xxxxxx et être rappelé par un membre de l'association ?",
  'value': 'Oui'}],
  'status': 'PROCESSED',
  'option_label': 'Adhésion utilisateurs'}
#+END_EXAMPLE

#+begin_src ipython :session api :file  :exports both
url = 'https://api.helloasso.com/v3/campaigns.json'
r = requests.get(url, auth=(cfg.ha['user'], cfg.ha['password']))
r.json()
#+end_src

#+RESULTS:
#+begin_example
# Out[7]:
,#+BEGIN_EXAMPLE
  {'resources': [{'id': '000000263336',
  'name': 'TEST - Change Florain numérique crédit unitaire',
  'slug': 'TEST---Change-Florain-numérique-crédit-unitaire',
  'type': 'PAYMENT_FORM',
  'state': 'PUBLIC',
  'funding': 0.0,
  'supporters': 0,
  'creation_date': '2020-05-20T22:23:30.199907',
  'last_update': '2020-05-20T22:34:56.814805+02:00'},
  {'id': '000000288223',
  'name': "Le Florain - Formulaire d'adhésion Professionnels",
  'slug': 'le-florain-formulaire-d-adhesion-acteurs',
  'type': 'MEMBERSHIP',
  'state': 'PUBLIC',
  'funding': 2810.0,
  'supporters': 49,
  'url': 'https://www.helloasso.com/associations/le-florain/adhesions/le-florain-formulaire-d-adhesion-acteurs',
  'id_organism': '000001201911',
  'slug_organism': 'le-florain',
  'creation_date': '2018-12-04T14:01:15.7922216',
  'last_update': '2019-01-03T13:43:49.7433333'},
  {'id': '000000349203',
  'name': "Le Florain - Formulaire d'adhésion Utilisateurs",
  'slug': 'le-florain-formulaire-d-adhesion-utilisateurs',
  'type': 'MEMBERSHIP',
  'state': 'PUBLIC',
  'funding': 696.0,
  'supporters': 60,
  'url': 'https://www.helloasso.com/associations/le-florain/adhesions/le-florain-formulaire-d-adhesion-utilisateurs',
  'id_organism': '000001201911',
  'slug_organism': 'le-florain',
  'creation_date': '2019-04-02T14:02:48.8763582',
  'last_update': '2020-03-02T10:54:32.0866667'},
  {'id': '000000984091',
  'name': 'Brocante du Florain',
  'slug': 'brocante-du-florain',
  'type': 'EVENT',
  'state': 'PUBLIC',
  'funding': 225.0,
  'supporters': 19,
  'url': 'https://www.helloasso.com/associations/le-florain/evenements/brocante-du-florain',
  'id_organism': '000001201911',
  'slug_organism': 'le-florain',
  'creation_date': '2019-07-23T14:24:56.169856',
  'last_update': '2019-10-02T08:10:00.94',
  'place_name': "Grande Halle de l'Octroi",
  'place_address': "Boulevard d'Austrasie",
  'place_city': 'NANCY',
  'place_zipcode': '54000',
  'place_country': 'FRA',
  'start_date': '2019-10-13T10:00:00',
  'end_date': '2019-10-13T18:00:00'},
  {'id': '000001079652',
  'name': 'Le Florain - Formulaire de dons',
  'slug': '1',
  'type': 'FORM',
  'state': 'PUBLIC',
  'funding': 510.0,
  'supporters': 2,
  'url': 'https://www.helloasso.com/associations/le-florain/formulaires/1',
  'id_organism': '000001201911',
  'slug_organism': 'le-florain',
  'creation_date': '2019-06-06T16:04:12.5404428',
  'last_update': '2019-06-06T16:04:58.1'}],
  'pagination': {'page': 1, 'max_page': 1, 'results_per_page': 20}}
,#+END_EXAMPLE
#+end_example

** Serveur flask
#+begin_src ipython :session api :file  :exports code :tangle hello.py
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, World!'
#+end_src

#+BEGIN_SRC bash
export FLASK_APP=hello.py
flask run
#+END_SRC

#+begin_src ipython :session api :file  :exports both
r = requests.get("http://127.0.0.1:5000/")
r.status_code, r.text
#+end_src

#+RESULTS:
: # Out[7]:
: : (200, 'Hello, World!')

Ok, on a un serveur qui sait répondre à une requête GET simple.

#+begin_src python :tangle server.py
from flask import request
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, World!'

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        data = request.form.to_dict()
        print(data)
        return {'coucou': 'coucoutext'}
    else:
        return 'coucou'
#+end_src

#+RESULTS:
: # Out[9]:

#+begin_src ipython :session api :file  :exports both
data = {'key1': 42}
r = requests.post("http://127.0.0.1:5000/login", data=data)
r.status_code, r.json()
#+end_src

#+RESULTS:
: # Out[21]:
: : (200, {'coucou': 'coucoutext'})

** URL de callback HelloAsso

Il est possible de paramétrer le site HelloAsso afin qu'il effectue
une requête POST sur une URL spécifique.

"Les notifications sont réalisées via des requêtes sous format
URLEncoded et en POST sur les urls que vous aurez définies pour chacun
des types de notification décrits dans ce chapitre."
https://dev.helloasso.com/v3/notifications

Ici sont présentées les données qui sont transmises lors d'un nouveau paiement.
| Paramètre        | 	Description                                                        | 	Format  |
|------------------+----------------------------------------------------------------------------+-----------------|
| id 	      | L’identifiant du paiement                                                  | 	string  |
| date 	    | La date                                                                    | 	string  |
| amount           | 	Le montant du paiement                                             | 	decimal |
| type 	    | Type de paiement paiement                                                  | 	string  |
| url 	     | L’url de la campagne sur laquelle a été effectué le paiement               | 	string  |
| payer_first_name | 	Le prénom du payeur                                                | 	string  |
| payer_last_name  | 	Le nom du payeur                                                   | 	string  |
| url_receipt      | 	L’url du reçu                                                      | 	string  |
| url_tax_receipt  | 	L’url du reçu fiscal 	                                      | string          |
| action_id        | 	Action ID à requeter pour les infos complémentaires 	string |                 |

Attention, il semblerait qu'un seul paiement d'un utilisateur sur le
site puisse déclencher plusieurs appels du callback. En effet,
l'utilisateur peut payer pour ce qu'il achète ET faire un don dans la
même procédure.

Les requetes sont de type URLencoded. Pour l'instant on a utilisé
uniquement des requêtes Json.

#+begin_src python :tangle server.py
@app.route('/paiement', methods=['POST'])
def paiement():
    if request.method == 'POST':
        data = request.form.to_dict()
        print(data, request, type(request))
        return "Merci, c'est tout bon !"
    else:
        return 'Only POST supported'
#+end_src
https://fr.wikipedia.org/wiki/Percent-encoding
Comment simuler une requete HelloAsso:
#+BEGIN_SRC bash
curl -d "id=id_42&date=2020-05-10T21:26:45&amount=1438&type=change&payer" -H "Content-Type: application/x-www-form-urlencoded" -X POST http://localhost:5000/paiement
#+END_SRC

#+RESULTS:
| Merci | c'est tout bon ! |

Une fois la notification de paiement reçu, il serait bon de récupérer
des informations supplémentaires sur l'action (je le rappelle,
l'action est un paiement unique avec un seul type). Une procédure
d'adhésion accompagnée d'un don renverra donc deux actions.

Une notification de paiement peut donc correspondre à trois types
d'actions différentes :

- don :: Ici, rien de particulier à faire. Éventuellement envoyer un
         mail de remerciement.
- change :: Il faut vérifier que l'utilisateur existe déjà, et si oui
            ajouter les fonds correspondants sur Cyclos. S'il n'existe
            pas (possible ?) il faut vérifier qu'il ne vient pas
            d'être créé lors de la même session.
- adhésion :: Il faut ajouter l'utilisateur dans la base maison, et
              dans Cyclos.

A noter que ces types sont hypothétiques car ils correspondent à
l'idée que je me fais à l'heure actuelle de la situation. Il n'est pas
certain que l'on puisse définir le contenu des champs types. Mais leur
contenu devrait pourvoir permettre de différencier ces 3 cas.

La rubrique "format des responses" stipule que le paiement peut avoir
plusieurs actions :

#+begin_example
{
	"id": "string",
	"date": "date",
	"amount": "decimal",
	"type" : "string",
	"payer_first_name": "string",
	"payer_last_name": "string",
	"payer_address": "string",
	"payer_zip_code": "string",
	"payer_city": "string",
	"payer_country": "string",
	"payer_email": "string",
	"payer_birthdate": "date",
	"payer_citizenship": "string",
	"payer_society": "string",
	"payer_is_society": "bool",
	"url_receipt": "string",
	"url_tax_receipt": "string",
	"status": "string",
	"actions": [
	    {
	    "id": "string",
	    "type": "string",
	    "amount": "decimal"
	    }
	    …
	]
}
#+end_example

Or la notification de nouveau paiement ne comporte qu'un seul ID. Il
  semblerait donc que lorsqu'un utilisateur effectue une inscription
  ET un don, la notification est envoyé une fois par action. Ce qui
  est plutôt pratique car cela permettrait de savoir s'il faut
  créditer ou simplement remercier la personne.

Autre point important, Il va falloir trouver une solution pour
identifier de manière sure (et automatique) la personne qui à payé. En
effet, pour effectuer une adhésion, il faut remplir MANUELLEMENT
prénom et nom.

Il y a deux cas de figures :
- Première Adhésion :: ou les informations rentrées par l'utilisateur
  serviront de référence pour l'ajout dans les différentes bases de données

- Ré-adhésion/Paiement d'un adhérent :: il va falloir
  s'assurer d'une manière ou d'une autre de retrouver la bonne
  personne dans la base de données Maison.

Solutions envisagées :
- Peut être attribuer un identifiant utilisateur à rentrer ?
- envoyer les utilisateurs existants sur une page pré-remplie ?


Il va falloir prévoir de quoi gérer les cas où une personne s'est trompée,

  https://dev.helloasso.com/v3/responses#paiements
** Logging

A chaque logiciel son journal !
#+begin_src ipython :session api :file  :exports both
import logging
logging.basicConfig(filename='example.log',level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.warning('And this, too')
#+end_src

#+RESULTS:
: # Out[8]:

#+BEGIN_SRC bash
  cat example.log
#+END_SRC

#+RESULTS:
| DEBUG:root:This  | message | should | go | to | the | log | file |
| INFO:root:So     | should  | this   |    |    |     |     |      |
| WARNING:root:And | this,   | too    |    |    |     |     |      |

** Cyclos

https://demo.cyclos.org/api

https://demo.cyclos.org/api/system/payments
*** Authentification

#+begin_src ipython :session api :file  :exports both
  r = requests.get("https://demo.cyclos.org/api/auth",
                   auth=('virgile', 'virgile'))
  r.status_code, r.json()
#+end_src

#+RESULTS:
: # Out[15]:
: : (401, {'code': 'login'})

Démarrage d'une session
#+begin_src ipython :session api :file  :exports both
  r = requests.post("https://demo.cyclos.org/api/auth/session",
                   auth=('virgile', '4242'))
  r.status_code, r.json()
#+end_src

#+RESULTS:
: # Out[12]:
: : (401, {'code': 'login'})
* Test serveur
** To deploy

#+begin_src ipython :session api :file  :exports both :tangle to_deploy.py
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Hello, World!'

@app.route('/hello.json')
def hello_json():
    return {'msg': 'Hello, World!'}
if __name__ == "__main__":
    app.run(host='0.0.0.0')
#+end_src

#+begin_src ipython :session api :file  :exports both
import requests
url ='https://florain.guigeek.org/hello.json'
r = requests.get(url)
r.status_code
#+end_src

#+RESULTS:
: # Out[12]:
: : 503
